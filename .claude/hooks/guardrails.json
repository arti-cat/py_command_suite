{
  "hooks": {
    "SessionStart": [
      {
        "matcher": ".*",
        "hooks": [
          {
            "type": "command",
            "command": "if [ -f mcp.json ]; then echo 'ERROR: Avoid default MCP preload; use explicit per-task MCP config following R&D Framework principles.' >&2 && exit 1; fi"
          },
          {
            "type": "command", 
            "command": "if [ -f .claude/CLAUDE.md ]; then size=$(wc -w < .claude/CLAUDE.md 2>/dev/null || echo 0); if [ $size -gt 800 ]; then echo 'ERROR: CLAUDE.md too large (~'$size' words). Follow R&D Framework: use /prime commands for context loading instead.' >&2 && exit 1; fi; fi"
          },
          {
            "type": "command",
            "command": "if [ -f CLAUDE.md ]; then size=$(wc -w < CLAUDE.md 2>/dev/null || echo 0); if [ $size -gt 800 ]; then echo 'ERROR: CLAUDE.md too large (~'$size' words). Follow R&D Framework: use /prime commands for context loading instead.' >&2 && exit 1; fi; fi"
          }
        ]
      }
    ],
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "cmd=$(echo '$1' | jq -r '.tool_input.command // \"\"'); if echo \"$cmd\" | grep -qE '^(curl |wget |rm -rf |sudo |docker |apt |brew |pip install |npm install -g )'; then echo 'ERROR: Disallowed command. Use UV for Python deps and project-local tools following R&D Framework safety principles.' >&2 && exit 1; fi"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "file_path=$(echo '$1' | jq -r '.tool_input.file_path // \"\"'); if [ -n \"$file_path\" ] && echo \"$file_path\" | grep -q '\\.py$'; then uvx ruff format \"$file_path\" 2>/dev/null || true; python -m compileall -q \"$file_path\" 2>/dev/null || true; fi"
          }
        ]
      }
    ]
  }
}